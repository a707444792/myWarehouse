luxian: function (e) {
    var that = this;
    var startLon = that.data.startLon;
    var startLat = that.data.startLat;
    var endLon = that.data.endLon;
    var endLat = that.data.endLat;
    var MapContext = wx.createMapContext('map', this);
    try {
      var strFrom = JSON.parse('{"latitude":' + startLat + ',"longitude":' + startLon + '}');
      var strTo = JSON.parse('{"latitude":' + endLat + ',"longitude":' + endLon + '}');
      qqmapsdk.direction({
        mode: 'driving', //可选值：'driving'（驾车）、'walking'（步行）、'bicycling'（骑行），不填默认：'driving',可不填
        //from参数不填默认当前地址
        from: strFrom,
        to: strTo,
        success: function (res) {
          var ret = res;
          var coors = ret.result.routes[0].polyline,
            pl = [];
          //坐标解压（返回的点串坐标，通过前向差分进行压缩）
          var kr = 1000000;
          for (var i = 2; i < coors.length; i++) {
            coors[i] = Number(coors[i - 2]) + Number(coors[i]) / kr;
          }
          //将解压后的坐标放入点串数组pl中
          for (var i = 0; i < coors.length; i += 2) {
            pl.push({
              latitude: coors[i],
              longitude: coors[i + 1]
            })
          }
          that.setData({
            mlatitude:pl[0].latitude,
            mlongitude:pl[0].longitude,
              mpolyline: [{
              points: pl,
              color: "#14D0B4",
              width: 7,
              arrowLine: true,
            }],
            markers: [{
              iconPath: "/pages/img/taxi.png",
              id: 0,
              latitude: that.data.endLat,
              longitude: that.data.endLon,
              rotate: app.globalData.angle, //旋转角度
              width: 20,
              height: 33,
            },
            {
              iconPath: "/pages/img/public_icon_location_a.png",
              id: 1,
              latitude: that.data.startLat,
              longitude: that.data.startLon,
              width: 25,
              height:30
            },
          ],
          })
          MapContext.includePoints({
            latitude:that.data.mlatitude,
            longitude:that.data.mlongitude,
            points: pl,
            padding:[135,135,135,135],              //被你发现了,可以设置上右下左的间距(px).不其实只能用第一个值100.
            success: function (e) {
              console.log(e)
            }
          })
          setInterval(function(){
          MapContext.includePoints({
            latitude:that.data.mlatitude,
            longitude:that.data.mlongitude,
            points: pl,
            padding:[100,100,100,100],              //被你发现了,可以设置上右下左的间距(px).不其实只能用第一个值100.
            success: function (e) {
              console.log(e)
            }
          })
        },5000000000)
        },
        fail: function (error) {        
          console.error(error);
        },
        complete: function (res) {

        }
      });
    } catch (e) {}
  },

  DisSuccess: function (data, key) {
    var that = this;
    try {
      // 设置polyline属性，将路线显示出来,将解压坐标第一个数据作为起点
      that.setData({
        latitude: data[0].latitude,
        longitude: data[0].longitude,
        polyline: [{
          points: data,
          arrowIconPath:"../../pages/img/list_arrow.png",
          borderColor: "#14D0B4",
          borderWidth: 3
        }],
        markers: [{
            iconPath: "/pages/img/taxi.png",
            id: 0,
            latitude: that.data.endLat,
            longitude: that.data.endLon,
            rotate: app.globalData.angle, //旋转角度
            width: 45,
            height: 45,
          },
          {
            iconPath: "/pages/img/qibu.png",
            id: 1,
            latitude: that.data.latitude,
            longitude: that.data.longitude,
            width: 30,
            height: 30
          },
        ],
      })
    } 
    catch (e) {}
  },

  DisFault: function (key) {
    var that = this;
    try {


    } catch (e) {}
  },

  dingshiqi: function () {
    var that = this;
    timeGetDriverPoint = setInterval(that.GetDriverPoint, 3000);
    timeGetOrderState = setInterval(that.GetOrderState, 5000);
  },